{
  "completions": [
    {
      "inputs": [
        {
          "role": "system",
          "content": "You are an assistant that given a snapshot of the current filesystem suggests a relative file path for the code algorithm mentioned in the prompt. No other words, just one file path"
        },
        {
          "role": "user",
          "content": "Please give me a recommended file path for the following prompt:\n<prompt>\nAdds numbers together\n</prompt>\n\nHere is a preview of the files in the current directory for reference. Please\nuse these as a reference as to what a good file name and path would be:\n<files>\ntest/nextjs-app/tsconfig.json\ntest/nextjs-app/tailwind.config.ts\ntest/nextjs-app/public\ntest/nextjs-app/postcss.config.mjs\ntest/nextjs-app/package.json\ntest/nextjs-app/package-lock.json\ntest/nextjs-app/next.config.mjs\ntest/nextjs-app/app\ntest/nextjs-app/README.md\nsrc/tests/ternary\nsrc/tests/angular-parser\nsrc/images/original-label.png\nsrc/images/my-version-label.png\nsrc/helpers/visual-test.ts\nsrc/helpers/visual-generate.ts\nsrc/helpers/test.ts\nsrc/helpers/systemPrompt.ts\nsrc/helpers/run.ts\nsrc/helpers/remove-backticks.ts\nsrc/helpers/remove-backticks.test.ts\nsrc/helpers/openai.test.ts\nsrc/helpers/llm.ts\nsrc/helpers/iterate-on-test.ts\nsrc/helpers/interactive-mode.ts\nsrc/helpers/get-screenshot.ts\nsrc/helpers/generate.ts\nsrc/helpers/find-visual-file.ts\nsrc/helpers/file-exists.ts\nsrc/helpers/exit-on-cancel.ts\nsrc/helpers/error.ts\nsrc/helpers/constants.ts\nsrc/helpers/config.ts\nsrc/helpers/config.test.ts\nsrc/helpers/base64.ts\nsrc/helpers/apply-unified-diff.ts\nsrc/helpers/apply-unified-diff.test.ts\nsrc/commands/update.ts\nsrc/commands/config.ts\n</files>"
        }
      ],
      "output": "src/helpers/add-numbers.ts"
    },
    {
      "inputs": [
        {
          "role": "system",
          "content": "You are an AI assistant that given a user prompt"
        },
        {
          "role": "user",
          "content": "Please prepare a unit test file (can be multiple tests) for the following prompt:\n        <prompt>\n        Adds numbers together\n        </prompt>\n\n        The test will be located at `test/add.test.ts` and the code to test will be located at\n        `test/add.ts`.\n\n        Here is a copy of a couple example tests in the repo:\n        <tests>\n        import { test, expect } from 'vitest';\nimport { removeBackticks } from './remove-backticks';\n\n// Remove backticks from a string, for instance to remove the\n// markdown backticks (+ language name) around code returned that\n// should just be that code\ntest('should remove backticks', () => {\nexpect(removeBackticks('```\nhello\n```')).toBe('hello');\nexpect(removeBackticks('```typescript\nhello\nworld\n```')).toBe(\n'hello\nworld'\n);\nexpect(removeBackticks('```js\nhello\nworld\n```')).toBe('hello\nworld');\n});\n\nimport { getOpenAi, getSimpleCompletion } from './llm';\nimport { KnownError } from './error';\nimport { expect, describe, it, vi } from 'vitest';\nimport OpenAI from 'openai';\nimport { ChatCompletionMessageParam } from 'openai/resources';\n\nconst mocks = vi.hoisted(() => {\nreturn {\nopenAIConstructor: vi.fn(),\ngetConfig: vi.fn(),\ncreate: vi.fn(),\n};\n});\n\nvi.mock('./config', () => {\nreturn {\ngetConfig: mocks.getConfig,\n};\n});\n\nvi.mock('openai', () => {\nreturn {\ndefault: mocks.openAIConstructor,\n};\n});\n\nmocks.openAIConstructor.mockImplementation(() => {\nreturn {\nchat: {\n  completions: {\n    create: mocks.create,\n  },\n},\n};\n});\n\nconst defaultConfig = {\nOPENAI_KEY: 'my-openai-key',\nOPENAI_API_ENDPOINT: 'https://api.openai.com/v1',\n};\n\ndescribe('getOpenAi', () => {\nit('should throw a KnownError if OPENAI_KEY is blank', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce({ OPENAI_KEY: '' })\n  .mockResolvedValueOnce({ OPENAI_KEY: '' });\n\nawait expect(getOpenAi()).rejects.toThrow(KnownError);\nawait expect(getOpenAi()).rejects.toThrow(\n  'Missing OpenAI key. Use `micro-agent config` to set it.'\n);\n});\n\nit('should create a new OpenAI instance with the provided key and endpoint', async () => {\nmocks.getConfig.mockResolvedValueOnce(defaultConfig);\n\nawait getOpenAi();\n\nexpect(OpenAI).toHaveBeenCalledWith({\n  apiKey: 'my-openai-key',\n  baseURL: 'https://api.openai.com/v1',\n});\n});\n});\n\ndescribe('getSimpleCompletion', () => {\nit('should call openai.chat.completions.create with the correct parameters', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce(defaultConfig)\n  .mockResolvedValueOnce(defaultConfig);\nmocks.create.mockResolvedValueOnce([]);\n\nconst messages: ChatCompletionMessageParam[] = [\n  { role: 'system', content: 'Hello' },\n];\nawait getSimpleCompletion({ messages });\n\nexpect(mocks.create).toHaveBeenCalledWith({\n  model: 'gpt-4o',\n  messages,\n  stream: true,\n});\n});\n\nit('should concatenate the output from completion chunks', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce(defaultConfig)\n  .mockResolvedValueOnce(defaultConfig);\nmocks.create.mockResolvedValueOnce([\n  { choices: [{ delta: { content: 'Hello' } }] },\n  { choices: [{ delta: { content: ' World' } }] },\n]);\n\nconst messages: ChatCompletionMessageParam[] = [\n  { role: 'system', content: 'Hello' },\n];\nconst output = await getSimpleCompletion({ messages });\n\nexpect(output).toBe('Hello World');\n});\n\nit('should call options.onChunk for each chunk', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce(defaultConfig)\n  .mockResolvedValueOnce(defaultConfig);\nmocks.create.mockResolvedValueOnce([\n  { choices: [{ delta: { content: 'Hello' } }] },\n  { choices: [{ delta: { content: ' World' } }] },\n]);\n\nconst messages: ChatCompletionMessageParam[] = [\n  { role: 'system', content: 'Hello' },\n];\nconst onChunk = vi.fn();\nconst output = await getSimpleCompletion({ messages, onChunk });\n\nexpect(onChunk).toHaveBeenCalledTimes(2);\nexpect(onChunk).toHaveBeenCalledWith('Hello');\nexpect(onChunk).toHaveBeenCalledWith(' World');\n});\n});\n\n        </tests>"
        }
      ],
      "output": "```typescript\nimport { test, expect } from 'vitest';\nimport { add } from './add';\n\ntest('should add two positive numbers', () => {\n  expect(add(2, 3)).toBe(5);\n});\n\ntest('should add two negative numbers', () => {\n  expect(add(-2, -3)).toBe(-5);\n});\n\ntest('should add a positive and a negative number', () => {\n  expect(add(2, -3)).toBe(-1);\n});\n\ntest('should add zero to a number', () => {\n  expect(add(0, 5)).toBe(5);\n  expect(add(5, 0)).toBe(5);\n});\n\ntest('should add decimal numbers', () => {\n  expect(add(2.5, 3.2)).toBeCloseTo(5.7, 5);\n  expect(add(-2.5, -3.2)).toBeCloseTo(-5.7, 5);\n});\n\ntest('should handle large numbers', () => {\n  expect(add(1e12, 1e12)).toBe(2e12);\n});\n```"
    },
    {
      "inputs": [
        {
          "role": "system",
          "content": "You take a prompt and existing unit tests and generate the function"
        },
        {
          "role": "user",
          "content": "Here is what I need:\n\n  <prompt>\n  Pass the tests\n  </prompt>\n\n  The current code is:\n  <code>\n  None\n  </code>\n\n  The file path for the above is test/calc.ts.\n\n  The test code that needs to pass is:\n  <test>\n  import { test, expect } from 'vitest';\nimport { add } from './calc';\n\ntest('should add two positive numbers', () => {\nexpect(add(2, 3)).toBe(5);\n});\n\ntest('should add two negative numbers', () => {\nexpect(add(-2, -3)).toBe(-5);\n});\n\ntest('should add a positive and a negative number', () => {\nexpect(add(2, -3)).toBe(-1);\n});\n\ntest('should add zero to a number', () => {\nexpect(add(0, 5)).toBe(5);\nexpect(add(5, 0)).toBe(5);\n});\n\ntest('should add decimal numbers', () => {\nexpect(add(2.5, 3.2)).toBeCloseTo(5.7, 5);\nexpect(add(-2.5, -3.2)).toBeCloseTo(-5.7, 5);\n});\n\ntest('should handle large numbers', () => {\nexpect(add(1e12, 1e12)).toBe(2e12);\n});\n  </test>\n\n  The file path for the test is test/calc.test.ts.\n\n  The error you received on that code was:\n  <error>\n  filter:  add\ninclude: **/*.{test,spec}.?(c|m)[jt]s?(x)\nexclude:  **/node_modules/**, **/dist/**, **/cypress/**, **/.{idea,git,cache,output,temp}/**, **/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*\nwatch exclude:  **/node_modules/**, **/dist/**\n\nNo test files found, exiting with code 1\n  </error>\n\n  Don't use any node modules that aren't included here unless specifically told otherwise:\n<package-json>\n{\n\"name\": \"@builder.io/micro-agent\",\n\"description\": \"An AI CLI that writes code for you.\",\n\"version\": \"0.0.26\",\n\"type\": \"module\",\n\"dependencies\": {\n\"@anthropic-ai/sdk\": \"^0.21.1\",\n\"@clack/core\": \"latest\",\n\"@clack/prompts\": \"latest\",\n\"@commitlint/cli\": \"^19.3.0\",\n\"@commitlint/config-conventional\": \"^19.2.2\",\n\"@dqbd/tiktoken\": \"^1.0.15\",\n\"@types/diff\": \"^5.2.1\",\n\"@types/probe-image-size\": \"^7.2.4\",\n\"cleye\": \"^1.3.2\",\n\"dedent\": \"^0.7.0\",\n\"diff\": \"^5.2.0\",\n\"execa\": \"^9.1.0\",\n\"glob\": \"^10.4.1\",\n\"ini\": \"^4.1.3\",\n\"kolorist\": \"^1.7.0\",\n\"ollama\": \"^0.5.1\",\n\"openai\": \"^4.47.1\",\n\"playwright\": \"^1.44.1\",\n\"probe-image-size\": \"^7.2.3\",\n\"sharp\": \"^0.33.4\"\n},\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"https://github.com/BuilderIO/micro-agent\"\n},\n\"files\": [\n\"dist\"\n],\n\"bin\": {\n\"micro-agent\": \"./dist/cli.mjs\",\n\"ma\": \"./dist/cli.mjs\"\n},\n\"scripts\": {\n\"test\": \"vitest run\",\n\"start\": \"jiti ./src/cli.ts\",\n\"lint:fix\": \"prettier --write . && eslint --fix\",\n\"lint\": \"prettier --check . && eslint\",\n\"typecheck\": \"tsc\",\n\"build\": \"pkgroll\",\n\"release:patch\": \"npm run build && npm version patch && npm run build && npm publish && git push --follow-tags && standard-version --release-as patch\",\n\"release\": \"standard-version\",\n\"release:minor\": \"standard-version --release-as minor\",\n\"release:major\": \"standard-version --release-as major\",\n\"postinstall\": \"npx playwright install\",\n\"prepare\": \"husky install\"\n},\n\"devDependencies\": {\n\"@types/dedent\": \"^0.7.0\",\n\"@types/ini\": \"^1.3.31\",\n\"@types/node\": \"^18.15.11\",\n\"@typescript-eslint/eslint-plugin\": \"^5.57.1\",\n\"@typescript-eslint/parser\": \"^5.57.1\",\n\"eslint\": \"^8.38.0\",\n\"eslint-plugin-unused-imports\": \"^2.0.0\",\n\"husky\": \"^8.0.0\",\n\"jiti\": \"^1.21.3\",\n\"pkgroll\": \"^1.9.0\",\n\"prettier\": \"^2.8.8\",\n\"standard-version\": \"^9.5.0\",\n\"typescript\": \"^4.9.5\",\n\"vitest\": \"^1.6.0\"\n}\n}\n\n</package-json>\n\n  Please give me the code that satisfies the prompt and test.\n\n  Be sure to use good coding conventions. For instance, if you are generating a typescript\n  file, use types (e.g. for function parameters, etc)."
        }
      ],
      "output": "const add = (a: number, b: number): number => {\n  return a + b;\n};\n\nexport { add };"
    },
    {
      "inputs": [
        {
          "role": "system",
          "content": "You are an AI assistant that given a user prompt"
        },
        {
          "role": "user",
          "content": "Please prepare a unit test file (can be multiple tests) for the following prompt:\n        <prompt>\n        Adds numbers together\n        </prompt>\n\n        The test will be located at `test/add.test.ts` and the code to test will be located at\n        `test/add.ts`.\n\n        Here is a copy of a couple example tests in the repo:\n        <tests>\n        import { test, expect } from 'vitest';\nimport { removeBackticks } from './remove-backticks';\n\n// Remove backticks from a string, for instance to remove the\n// markdown backticks (+ language name) around code returned that\n// should just be that code\ntest('should remove backticks', () => {\nexpect(removeBackticks('```\nhello\n```')).toBe('hello');\nexpect(removeBackticks('```typescript\nhello\nworld\n```')).toBe(\n'hello\nworld'\n);\nexpect(removeBackticks('```js\nhello\nworld\n```')).toBe('hello\nworld');\n});\n\nimport { getOpenAi, getSimpleCompletion } from './llm';\nimport { KnownError } from './error';\nimport { expect, describe, it, vi } from 'vitest';\nimport OpenAI from 'openai';\nimport { ChatCompletionMessageParam } from 'openai/resources';\n\nconst mocks = vi.hoisted(() => {\nreturn {\nopenAIConstructor: vi.fn(),\ngetConfig: vi.fn(),\ncreate: vi.fn(),\n};\n});\n\nvi.mock('./config', () => {\nreturn {\ngetConfig: mocks.getConfig,\n};\n});\n\nvi.mock('openai', () => {\nreturn {\ndefault: mocks.openAIConstructor,\n};\n});\n\nmocks.openAIConstructor.mockImplementation(() => {\nreturn {\nchat: {\n  completions: {\n    create: mocks.create,\n  },\n},\n};\n});\n\nconst defaultConfig = {\nOPENAI_KEY: 'my-openai-key',\nOPENAI_API_ENDPOINT: 'https://api.openai.com/v1',\n};\n\ndescribe('getOpenAi', () => {\nit('should throw a KnownError if OPENAI_KEY is blank', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce({ OPENAI_KEY: '' })\n  .mockResolvedValueOnce({ OPENAI_KEY: '' });\n\nawait expect(getOpenAi()).rejects.toThrow(KnownError);\nawait expect(getOpenAi()).rejects.toThrow(\n  'Missing OpenAI key. Use `micro-agent config` to set it.'\n);\n});\n\nit('should create a new OpenAI instance with the provided key and endpoint', async () => {\nmocks.getConfig.mockResolvedValueOnce(defaultConfig);\n\nawait getOpenAi();\n\nexpect(OpenAI).toHaveBeenCalledWith({\n  apiKey: 'my-openai-key',\n  baseURL: 'https://api.openai.com/v1',\n});\n});\n});\n\ndescribe('getSimpleCompletion', () => {\nit('should call openai.chat.completions.create with the correct parameters', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce(defaultConfig)\n  .mockResolvedValueOnce(defaultConfig);\nmocks.create.mockResolvedValueOnce([]);\n\nconst messages: ChatCompletionMessageParam[] = [\n  { role: 'system', content: 'Hello' },\n];\nawait getSimpleCompletion({ messages });\n\nexpect(mocks.create).toHaveBeenCalledWith({\n  model: 'gpt-4o',\n  messages,\n  stream: true,\n});\n});\n\nit('should concatenate the output from completion chunks', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce(defaultConfig)\n  .mockResolvedValueOnce(defaultConfig);\nmocks.create.mockResolvedValueOnce([\n  { choices: [{ delta: { content: 'Hello' } }] },\n  { choices: [{ delta: { content: ' World' } }] },\n]);\n\nconst messages: ChatCompletionMessageParam[] = [\n  { role: 'system', content: 'Hello' },\n];\nconst output = await getSimpleCompletion({ messages });\n\nexpect(output).toBe('Hello World');\n});\n\nit('should call options.onChunk for each chunk', async () => {\nmocks.getConfig\n  .mockResolvedValueOnce(defaultConfig)\n  .mockResolvedValueOnce(defaultConfig);\nmocks.create.mockResolvedValueOnce([\n  { choices: [{ delta: { content: 'Hello' } }] },\n  { choices: [{ delta: { content: ' World' } }] },\n]);\n\nconst messages: ChatCompletionMessageParam[] = [\n  { role: 'system', content: 'Hello' },\n];\nconst onChunk = vi.fn();\nconst output = await getSimpleCompletion({ messages, onChunk });\n\nexpect(onChunk).toHaveBeenCalledTimes(2);\nexpect(onChunk).toHaveBeenCalledWith('Hello');\nexpect(onChunk).toHaveBeenCalledWith(' World');\n});\n});\n\n        </tests>"
        }
      ],
      "output": "```typescript\nimport { test, expect, describe } from 'vitest';\nimport { add } from './add';\n\ndescribe('add', () => {\n    it('should add two positive numbers', () => {\n        expect(add(2, 3)).toBe(5);\n    });\n\n    it('should add two negative numbers', () => {\n        expect(add(-2, -3)).toBe(-5);\n    });\n\n    it('should add a positive and a negative number', () => {\n        expect(add(2, -3)).toBe(-1);\n    });\n\n    it('should add zero to a number', () => {\n        expect(add(0, 5)).toBe(5);\n        expect(add(5, 0)).toBe(5);\n    });\n\n    it('should add decimal numbers', () => {\n        expect(add(2.5, 3.2)).toBeCloseTo(5.7, 5);\n        expect(add(-2.5, -3.2)).toBeCloseTo(-5.7, 5);\n    });\n\n    it('should handle large numbers', () => {\n        expect(add(1e12, 1e12)).toBe(2e12);\n    });\n})\n\n```"
    }
  ]
}
